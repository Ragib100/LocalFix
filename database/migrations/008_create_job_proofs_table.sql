CREATE TABLE job_proofs (
    proof_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    job_id NUMBER NOT NULL,
    worker_id NUMBER NOT NULL,
    proof_photo VARCHAR2(500),
    proof_description CLOB NOT NULL,
    submitted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    verified_by NUMBER,
    verified_at TIMESTAMP,
    verification_status VARCHAR2(20) DEFAULT 'pending' 
        CHECK (verification_status IN ('pending', 'approved', 'rejected')),
    admin_feedback CLOB
);

-- Add foreign key constraints
ALTER TABLE job_proofs ADD CONSTRAINT fk_proofs_job 
    FOREIGN KEY (job_id) REFERENCES jobs(job_id) ON DELETE CASCADE;

ALTER TABLE job_proofs ADD CONSTRAINT fk_proofs_worker 
    FOREIGN KEY (worker_id) REFERENCES users(user_id) ON DELETE CASCADE;

ALTER TABLE job_proofs ADD CONSTRAINT fk_proofs_admin 
    FOREIGN KEY (verified_by) REFERENCES users(user_id) ON DELETE SET NULL;

-- Unique constraint: only one proof per job
ALTER TABLE job_proofs ADD CONSTRAINT uk_proofs_job UNIQUE (job_id);

-- Create indexes
CREATE INDEX idx_proofs_worker ON job_proofs(worker_id);
CREATE INDEX idx_proofs_status ON job_proofs(verification_status);
CREATE INDEX idx_proofs_submitted_at ON job_proofs(submitted_at);

-- Business logic validation through triggers (not CHECK constraints)
CREATE OR REPLACE TRIGGER trg_proof_submitted
    BEFORE INSERT ON job_proofs
    FOR EACH ROW
DECLARE
    current_job_status NUMBER;
    assigned_worker NUMBER;
    worker_type VARCHAR2(20);
BEGIN
    -- Validate that the worker submitting proof is actually a worker
    SELECT user_type INTO worker_type 
    FROM users WHERE user_id = :NEW.worker_id;
    
    IF worker_type != 'worker' THEN
        RAISE_APPLICATION_ERROR(-20004, 'Only workers can submit job proofs');
    END IF;
    
    -- Get current job status and assigned worker
    SELECT status_id, assigned_worker_id 
    INTO current_job_status, assigned_worker 
    FROM jobs WHERE job_id = :NEW.job_id;
    
    -- Validate that this worker is assigned to this job
    IF assigned_worker != :NEW.worker_id THEN
        RAISE_APPLICATION_ERROR(-20005, 'Only the assigned worker can submit proof for this job');
    END IF;
    
    -- Validate job status allows proof submission
    IF current_job_status NOT IN (3, 4) THEN  -- in_progress or completed
        RAISE_APPLICATION_ERROR(-20006, 'Can only submit proof for jobs that are in progress or completed');
    END IF;
    
    -- If job is in_progress, update to completed
    IF current_job_status = 3 THEN  -- in_progress
        UPDATE jobs 
        SET status_id = 4, updated_at = CURRENT_TIMESTAMP  -- completed
        WHERE job_id = :NEW.job_id;
    END IF;
END;
/

-- Trigger for proof verification with admin validation
CREATE OR REPLACE TRIGGER trg_proof_verified
    BEFORE UPDATE OF verification_status ON job_proofs
    FOR EACH ROW
    WHEN (NEW.verification_status IN ('approved', 'rejected'))
DECLARE
    admin_type VARCHAR2(20);
BEGIN
    -- Validate that only admins can verify proofs
    IF :NEW.verified_by IS NOT NULL THEN
        SELECT user_type INTO admin_type 
        FROM users WHERE user_id = :NEW.verified_by;
        
        IF admin_type != 'admin' THEN
            RAISE_APPLICATION_ERROR(-20007, 'Only admins can verify job proofs');
        END IF;
    END IF;
    
    -- Set verification timestamp
    :NEW.verified_at := CURRENT_TIMESTAMP;
END;
/

-- Trigger to update job status after proof verification
CREATE OR REPLACE TRIGGER trg_proof_verified_after
    AFTER UPDATE OF verification_status ON job_proofs
    FOR EACH ROW
BEGIN
    IF :NEW.verification_status = 'approved' THEN
        -- Update job status to 'verified'
        UPDATE jobs 
        SET status_id = 5, updated_at = CURRENT_TIMESTAMP  -- verified
        WHERE job_id = :NEW.job_id;
        
    ELSIF :NEW.verification_status = 'rejected' THEN
        -- If proof is rejected, job goes back to in_progress
        UPDATE jobs 
        SET status_id = 3, updated_at = CURRENT_TIMESTAMP  -- back to in_progress
        WHERE job_id = :NEW.job_id;
    END IF;
END;
/

COMMIT;