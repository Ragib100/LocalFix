-- This table records payouts from admin (system) to workers.
-- From worker perspective, these are earnings. From admin perspective, payouts.

CREATE TABLE payments (
    payment_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    issue_id NUMBER NOT NULL,
    citizen_id NUMBER NOT NULL,
    worker_id NUMBER NOT NULL,
    amount NUMBER(10,2) NOT NULL,
    payment_method VARCHAR2(50) DEFAULT 'cash' CHECK (payment_method IN ('cash', 'bkash', 'nagad', 'rocket', 'bank_transfer', 'card')),
    payment_status VARCHAR2(20) DEFAULT 'pending' CHECK (payment_status IN ('pending', 'processing', 'completed', 'failed', 'refunded')),
    transaction_id VARCHAR2(100),
    payment_date TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    -- Foreign key constraints
    CONSTRAINT fk_payments_issue FOREIGN KEY (issue_id) REFERENCES issues(issue_id) ON DELETE CASCADE,
    CONSTRAINT fk_payments_citizen FOREIGN KEY (citizen_id) REFERENCES users(user_id) ON DELETE CASCADE,
    CONSTRAINT fk_payments_worker FOREIGN KEY (worker_id) REFERENCES users(user_id) ON DELETE CASCADE,
    
    -- Check constraints
    CONSTRAINT chk_payments_amount CHECK (amount > 0),
    
    -- Ensure only one payment per issue
    CONSTRAINT uk_payments_issue UNIQUE (issue_id)
);

-- Indexes
CREATE INDEX idx_payments_citizen ON payments(citizen_id);
CREATE INDEX idx_payments_worker ON payments(worker_id);
CREATE INDEX idx_payments_status ON payments(payment_status);
CREATE INDEX idx_payments_date ON payments(payment_date);

-- Sequence to generate transaction identifiers (idempotent)
DECLARE
    v_exists NUMBER := 0;
BEGIN
    SELECT COUNT(*) INTO v_exists 
    FROM user_sequences 
    WHERE sequence_name = 'SEQ_PAYMENT_TX';
    IF v_exists = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE seq_payment_tx START WITH 1000 INCREMENT BY 1 NOCACHE';
    END IF;
END;
/

-- Trigger to auto-populate transaction_id using the sequence when not provided
CREATE OR REPLACE TRIGGER trg_payments_set_tx
    BEFORE INSERT ON payments
    FOR EACH ROW
BEGIN
    IF :NEW.transaction_id IS NULL THEN
        :NEW.transaction_id := 'TX-' || TO_CHAR(seq_payment_tx.NEXTVAL);
    END IF;
END;
/

-- Trigger for auto-updating updated_at
CREATE OR REPLACE TRIGGER trg_payments_updated_at
    BEFORE UPDATE ON payments
    FOR EACH ROW
BEGIN
    :NEW.updated_at := CURRENT_TIMESTAMP;
END;
/

-- Trigger to update issue status when payment is completed
CREATE OR REPLACE TRIGGER trg_payment_completed
    AFTER INSERT OR UPDATE OF payment_status ON payments
    FOR EACH ROW
BEGIN
    IF :NEW.payment_status = 'completed' THEN
        -- Update issue status to 'closed'
        UPDATE issues 
        SET status = 'closed', updated_at = CURRENT_TIMESTAMP
        WHERE issue_id = :NEW.issue_id;
    END IF;
END;
/

COMMIT;