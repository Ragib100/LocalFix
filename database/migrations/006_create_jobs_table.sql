CREATE TABLE jobs (
    job_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    citizen_id NUMBER NOT NULL,
    issue_id NUMBER NOT NULL,
    location_id NUMBER NOT NULL,
    job_title VARCHAR2(200) NOT NULL,
    job_description CLOB NOT NULL,
    job_photo VARCHAR2(500),
    estimated_budget NUMBER(10,2),
    deadline DATE,
    status_id NUMBER DEFAULT 1,
    assigned_worker_id NUMBER,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

    -- Foreign key constraints (FIXED: issue_id now references issues table)
    CONSTRAINT fk_jobs_citizen FOREIGN KEY (citizen_id) REFERENCES users(user_id) ON DELETE CASCADE,
    CONSTRAINT fk_jobs_issue FOREIGN KEY (issue_id) REFERENCES issues(issue_id),
    CONSTRAINT fk_jobs_location FOREIGN KEY (location_id) REFERENCES locations(location_id),
    CONSTRAINT fk_jobs_status FOREIGN KEY (status_id) REFERENCES job_status(status_id),
    CONSTRAINT fk_jobs_worker FOREIGN KEY (assigned_worker_id) REFERENCES users(user_id) ON DELETE SET NULL,

    -- Check constraints (FIXED: deadline check)
    CONSTRAINT chk_jobs_budget CHECK (estimated_budget > 0),
    CONSTRAINT chk_jobs_deadline CHECK (deadline IS NULL OR deadline >= TRUNC(created_at))
);

-- Indexes for better performance
CREATE INDEX idx_jobs_citizen ON jobs(citizen_id);
CREATE INDEX idx_jobs_issue ON jobs(issue_id);
CREATE INDEX idx_jobs_status ON jobs(status_id);
CREATE INDEX idx_jobs_worker ON jobs(assigned_worker_id);
CREATE INDEX idx_jobs_location ON jobs(location_id);
CREATE INDEX idx_jobs_created_at ON jobs(created_at);

-- Trigger for auto-updating updated_at
CREATE OR REPLACE TRIGGER trg_jobs_updated_at
    BEFORE UPDATE ON jobs
    FOR EACH ROW
BEGIN
    :NEW.updated_at := CURRENT_TIMESTAMP;
END;
/

COMMIT;