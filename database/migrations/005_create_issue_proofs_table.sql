
CREATE TABLE issue_proofs (
    proof_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    issue_id NUMBER NOT NULL,
    worker_id NUMBER NOT NULL,
    proof_photo VARCHAR2(500),
    proof_description CLOB NOT NULL,
    submitted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    verified_at TIMESTAMP,
    verification_status VARCHAR2(20) DEFAULT 'pending' 
        CHECK (verification_status IN ('pending', 'approved', 'rejected')),
    admin_feedback CLOB,
    verified_by NUMBER -- Admin who verified the proof
);

-- Add foreign key constraints
ALTER TABLE issue_proofs ADD CONSTRAINT fk_proofs_issue 
    FOREIGN KEY (issue_id) REFERENCES issues(issue_id) ON DELETE CASCADE;

ALTER TABLE issue_proofs ADD CONSTRAINT fk_proofs_worker 
    FOREIGN KEY (worker_id) REFERENCES users(user_id) ON DELETE CASCADE;

ALTER TABLE issue_proofs ADD CONSTRAINT fk_proofs_verified_by 
    FOREIGN KEY (verified_by) REFERENCES users(user_id);

-- Unique constraint: only one proof per issue
ALTER TABLE issue_proofs ADD CONSTRAINT uk_proofs_issue UNIQUE (issue_id);

-- Create indexes
CREATE INDEX idx_proofs_worker ON issue_proofs(worker_id);
CREATE INDEX idx_proofs_status ON issue_proofs(verification_status);
CREATE INDEX idx_proofs_submitted_at ON issue_proofs(submitted_at);
CREATE INDEX idx_proofs_verified_by ON issue_proofs(verified_by);

-- Business logic validation through triggers
CREATE OR REPLACE TRIGGER trg_proof_submitted
    BEFORE INSERT ON issue_proofs
    FOR EACH ROW
DECLARE
    current_issue_status VARCHAR2(20);
    assigned_worker NUMBER;
    worker_type VARCHAR2(20);
BEGIN
    -- Validate that the worker submitting proof is actually a worker
    SELECT user_type INTO worker_type 
    FROM users WHERE user_id = :NEW.worker_id;
    
    IF worker_type != 'worker' THEN
        RAISE_APPLICATION_ERROR(-20004, 'Only workers can submit issue proofs');
    END IF;
    
    -- Get current issue status and assigned worker
    SELECT status, assigned_worker_id 
    INTO current_issue_status, assigned_worker 
    FROM issues WHERE issue_id = :NEW.issue_id;
    
    -- Validate that this worker is assigned to this issue
    IF assigned_worker IS NULL OR assigned_worker != :NEW.worker_id THEN
        RAISE_APPLICATION_ERROR(-20005, 'Only the assigned worker can submit proof for this issue');
    END IF;
    
    -- Validate issue status allows proof submission
    IF current_issue_status NOT IN ('assigned', 'in_progress') THEN
        RAISE_APPLICATION_ERROR(-20006, 'Can only submit proof for issues that are assigned or in progress');
    END IF;
    
    -- After proof submission, update the related issue's status to 'under_review'.
    -- This single update consolidates the logic and avoids transactional issues.
    UPDATE issues 
    SET status = 'under_review', updated_at = CURRENT_TIMESTAMP
    WHERE issue_id = :NEW.issue_id;
END;
/

-- Trigger for proof verification with admin validation
CREATE OR REPLACE TRIGGER trg_proof_verified
    BEFORE UPDATE OF verification_status ON issue_proofs
    FOR EACH ROW
    WHEN (NEW.verification_status IN ('approved', 'rejected'))
BEGIN
    -- Set verification timestamp
    :NEW.verified_at := CURRENT_TIMESTAMP;
END;
/

-- Separate trigger to validate admin permissions
CREATE OR REPLACE TRIGGER trg_proof_verified_admin_check
    BEFORE UPDATE OF verified_by ON issue_proofs
    FOR EACH ROW
DECLARE
    admin_type VARCHAR2(20);
BEGIN
    -- Validate that only admins can verify proofs
    IF :NEW.verified_by IS NOT NULL THEN
        SELECT user_type INTO admin_type 
        FROM users WHERE user_id = :NEW.verified_by;
        
        IF admin_type != 'admin' THEN
            RAISE_APPLICATION_ERROR(-20007, 'Only admins can verify issue proofs');
        END IF;
    END IF;
END;
/

-- Trigger to update issue status after proof verification
CREATE OR REPLACE TRIGGER trg_proof_verified_after
    AFTER UPDATE OF verification_status ON issue_proofs
    FOR EACH ROW
BEGIN
    IF :NEW.verification_status = 'approved' THEN
        -- Update issue status to 'resolved'
        UPDATE issues 
        SET status = 'resolved', updated_at = CURRENT_TIMESTAMP
        WHERE issue_id = :NEW.issue_id;
        
    ELSIF :NEW.verification_status = 'rejected' THEN
        -- If proof is rejected, issue goes back to in_progress
        UPDATE issues 
        SET status = 'in_progress', updated_at = CURRENT_TIMESTAMP
        WHERE issue_id = :NEW.issue_id;
    END IF;
END;
/

COMMIT;