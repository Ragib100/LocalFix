-- LocalFix Database Schema for Applications
-- Save as: database/migrations/007_create_applications_table.sql

CREATE TABLE applications (
    application_id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    job_id NUMBER NOT NULL,
    worker_id NUMBER NOT NULL,
    estimated_cost NUMBER(10,2) NOT NULL,
    estimated_time VARCHAR2(50) NOT NULL,
    proposal_description CLOB,
    status_id NUMBER DEFAULT 1,
    reviewed_by NUMBER,
    feedback CLOB,
    applied_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    reviewed_at TIMESTAMP,

    -- Primary key constraint
    CONSTRAINT pk_applications PRIMARY KEY (application_id),

    -- Foreign key constraints
    CONSTRAINT fk_applications_job FOREIGN KEY (job_id) REFERENCES jobs(job_id),
    CONSTRAINT fk_applications_worker FOREIGN KEY (worker_id) REFERENCES users(user_id),
    CONSTRAINT fk_applications_status FOREIGN KEY (status_id) REFERENCES application_status(status_id),
    CONSTRAINT fk_applications_reviewer FOREIGN KEY (reviewed_by) REFERENCES users(user_id),

    -- Check constraints
    CONSTRAINT chk_applications_cost CHECK (estimated_cost > 0),
    CONSTRAINT chk_applications_time CHECK (estimated_time IS NOT NULL),

    -- Unique constraint to prevent duplicate applications
    CONSTRAINT uk_applications_job_worker UNIQUE (job_id, worker_id)
);

-- Indexes for better performance
CREATE INDEX idx_applications_job ON applications(job_id);
CREATE INDEX idx_applications_worker ON applications(worker_id);
CREATE INDEX idx_applications_status ON applications(status_id);
CREATE INDEX idx_applications_applied_at ON applications(applied_at);

-- Trigger to update job status when application is accepted
CREATE OR REPLACE TRIGGER trg_applications_status_update
    AFTER UPDATE OF status_id ON applications
    FOR EACH ROW
    WHEN (NEW.status_id = 3) -- When status is 'accepted'
BEGIN
    -- Update job status to 'assigned' and set the worker
    UPDATE jobs
    SET status_id = 2,
        assigned_worker_id = :NEW.worker_id,
        updated_at = CURRENT_TIMESTAMP
    WHERE job_id = :NEW.job_id;

    -- Reject all other applications for this job
    UPDATE applications
    SET status_id = 4,
        reviewed_at = CURRENT_TIMESTAMP
    WHERE job_id = :NEW.job_id
      AND application_id != :NEW.application_id
      AND status_id IN (1, 2);
END;
