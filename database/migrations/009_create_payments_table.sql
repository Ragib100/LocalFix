-- LocalFix Database Schema for Payments
-- Save as: database/migrations/009_create_payments_table.sql

CREATE TABLE payments (
    payment_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    job_id NUMBER NOT NULL,
    citizen_id NUMBER NOT NULL,
    worker_id NUMBER NOT NULL,
    amount NUMBER(10,2) NOT NULL,
    payment_method VARCHAR2(50) DEFAULT 'cash' CHECK (payment_method IN ('cash', 'bkash', 'nagad', 'rocket', 'bank_transfer', 'card')),
    payment_status VARCHAR2(20) DEFAULT 'pending' CHECK (payment_status IN ('pending', 'processing', 'completed', 'failed', 'refunded')),
    transaction_id VARCHAR2(100),
    payment_date TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    -- Foreign key constraints
    CONSTRAINT fk_payments_job FOREIGN KEY (job_id) REFERENCES jobs(job_id) ON DELETE CASCADE,
    CONSTRAINT fk_payments_citizen FOREIGN KEY (citizen_id) REFERENCES users(user_id) ON DELETE CASCADE,
    CONSTRAINT fk_payments_worker FOREIGN KEY (worker_id) REFERENCES users(user_id) ON DELETE CASCADE,
    
    -- Check constraints
    CONSTRAINT chk_payments_amount CHECK (amount > 0),
    
    -- Ensure only one payment per job
    CONSTRAINT uk_payments_job UNIQUE (job_id)
);

-- Indexes
CREATE INDEX idx_payments_job ON payments(job_id);
CREATE INDEX idx_payments_citizen ON payments(citizen_id);
CREATE INDEX idx_payments_worker ON payments(worker_id);
CREATE INDEX idx_payments_status ON payments(payment_status);
CREATE INDEX idx_payments_date ON payments(payment_date);

-- Trigger for auto-updating updated_at
CREATE OR REPLACE TRIGGER trg_payments_updated_at
    BEFORE UPDATE ON payments
    FOR EACH ROW
BEGIN
    :NEW.updated_at := CURRENT_TIMESTAMP;
END;

-- Trigger to update job status when payment is completed
CREATE OR REPLACE TRIGGER trg_payment_completed
    AFTER UPDATE OF payment_status ON payments
    FOR EACH ROW
    WHEN (NEW.payment_status = 'completed')
BEGIN
    -- Update job status to 'closed'
    UPDATE jobs 
    SET status_id = 6, updated_at = CURRENT_TIMESTAMP
    WHERE job_id = :NEW.job_id;
END;

COMMIT;